// // Script for sticky header
$(window).scroll(function () {
    if ($(this).scrollTop() > 1) {
        $("header").addClass("sticky");
    } else {
        $("header").removeClass("sticky");
    }
});

// Script for WOW Animation Initialize
new WOW().init();

// Script for Product Carousel
$(".proCarousel").slick({
    autoplay: true,
    autoplaySpeed: 5000,
    dots: false,
    arrows: true,
    infinite: true,
    slidesToShow: 5,
    slidesToScroll: 5,
    responsive: [
        {
            breakpoint: 991,
            settings: {
                slidesToShow: 5,
            },
        },
        {
            breakpoint: 768,
            settings: {
                slidesToShow: 2,
            },
        },
        {
            breakpoint: 575,
            settings: {
                slidesToShow: 1,
            },
        },
    ],
});

$(".slider-for")
    .slick({
        slidesToShow: 1,
        slidesToScroll: 1,
        arrows: false,
        fade: false,
        asNavFor: ".slider-nav",
        draggable: false,
    })
    .on("beforeChange", function (event, slick, currentSlide, nextSlide) {
        $(this)
            .find('.slick-slide[data-slick-index="' + nextSlide + '"]')
            .addClass("zooM-image");
        $(this)
            .find('.slick-slide[data-slick-index="' + currentSlide + '"]')
            .removeClass("zooM-image");
    });
$(".slider-nav").slick({
    slidesToShow: 4,
    slidesToScroll: 1,
    asNavFor: ".slider-for",
    dots: false,
    centerMode: true,
    focusOnSelect: true,
    arrows: true,
    responsive: [
        {
            breakpoint: 768,
            settings: {
                slidesToShow: 3,
            },
        },
    ],
});

// Page RoleBack to Top
$(document).ready(function () {
    $(".roleback").click(function () {
        $("html, body").animate({ scrollTop: 0 }, 800);
        return false;
    });
});

// Go Down
$(function () {
    $(".goDown").on("click", function (e) {
        e.preventDefault();
        $("html, body").animate(
            { scrollTop: $($(this).attr("href")).offset().top },
            500,
            "linear"
        );
    });
});

// Script for Counter
$(document).ready(function () {
    $(".proCounter .minus").click(function () {
        var $input = $(this).parent().find("input");
        var count = parseInt($input.val()) - 1;
        count = count < 1 ? 1 : count;
        $input.val(count);
        $input.change();
        return false;
    });
    $(".proCounter .plus").click(function () {
        var $input = $(this).parent().find("input");
        $input.val(parseInt($input.val()) + 1);
        $input.change();
        return false;
    });
});

// Script Header Notification
$(".header-notifications").each(function () {
    var userMenu = $(this);
    var userMenuTrigger = $(this).find(".header-notifications-trigger a");
    $(userMenuTrigger).on("click", function (event) {
        event.preventDefault();
        if ($(this).closest(".header-notifications").is(".active")) {
            close_user_dropdown();
        } else {
            close_user_dropdown();
            userMenu.addClass("active");
        }
    });
});

function close_user_dropdown() {
    $(".header-notifications").removeClass("active");
}
var mouse_is_inside = false;
$(".header-notifications").on("mouseenter", function () {
    mouse_is_inside = true;
});
$(".header-notifications").on("mouseleave", function () {
    mouse_is_inside = false;
});
$("body").mouseup(function () {
    if (!mouse_is_inside) close_user_dropdown();
});
$(document).keyup(function (e) {
    if (e.keyCode == 27) {
        close_user_dropdown();
    }
});

// Scirpt for Online & Invisible Status
$(".status-switch .user-online").click(function () {
    $(".header-notifications").addClass("status_online");
    $(".header-notifications").removeClass("status_invisible");
});
$(".status-switch .user-invisible").click(function () {
    $(".header-notifications").addClass("status_invisible");
    $(".header-notifications").removeClass("status_online");
});

// Script for Price Range Slider
$(function () {
    var $slider = $("#slider-range");
    //Get min and max values
    var priceMin = $slider.attr("data-min"),
        priceMax = $slider.attr("data-max");

    //Set min and max values where relevant
    $("#filter-min, #filter-max").map(function () {
        $(this).attr({
            min: priceMin,
            max: priceMax,
        });
    });
    // $("#filter-min").attr({
    // 	"placeholder": "min-" + priceMin,
    // 	"value": ""
    // });
    // $("#filter-max").attr({
    // 	"placeholder": "max-" + priceMax,
    // 	"value": ""
    // });

    $slider.slider({
        range: true,
        min: Math.max(priceMin, 0),
        max: priceMax,
        values: [priceMin, priceMax],
        slide: function (event, ui) {
            $("#filter-min").val(ui.values[0]);
            $("#filter-max").val(ui.values[1]);
        },
    });
    $("#filter-min, #filter-max").map(function () {
        $(this).on("input", function () {
            updateSlider();
        });
    });
    function updateSlider() {
        $slider.slider("values", [
            $("#filter-min").val(),
            $("#filter-max").val(),
        ]);
    }
});

// Script for Profile picture upload
function readURL(input) {
    if (input.files && input.files[0]) {
        var reader = new FileReader();
        reader.onload = function (e) {
            $("#imagePreview").css(
                "background-image",
                "url(" + e.target.result + ")"
            );
            $("#imagePreview").hide();
            $("#imagePreview").fadeIn(650);
        };
        reader.readAsDataURL(input.files[0]);
    }
}
$("#imageUpload").change(function () {
    readURL(this);
});

// Script For Remove Product
// $('.opt .remove, .adressCard .remove').click(function () {
// 	alert('Are you sure? you wants to delete this product?')
// });

$(".specialDealSlider").slick({
    autoplay: true,
    autoplaySpeed: 5000,
    dots: false,
    arrows: true,
    infinite: true,
    slidesToShow: 5,
    slidesToScroll: 5,
    responsive: [
        {
            breakpoint: 1600,
            settings: {
                slidesToShow: 4,
            },
        },
        {
            breakpoint: 1199,
            settings: {
                slidesToShow: 3,
            },
        },
        {
            breakpoint: 767,
            settings: {
                slidesToShow: 2,
            },
        },
    ],
});

$(".advertiseSlider .row").slick({
    autoplay: true,
    autoplaySpeed: 5000,
    // dots: false,
    slidesToShow: 2, // default desktop values
    slidesToScroll: 2,
    rows: 2,
    dots: true,
    arrows: true,
    responsive: [
        {
            breakpoint: 575,
            settings: {
                slidesToShow: 2,
                arrows: false,
            },
        },
    ],
});
$(".cst-has-menu h4").click(function () {
    $(this)
        .parent(".cst-has-menu")
        .siblings(".cst-has-menu")
        .removeClass("active");
    $(this)
        .parent(".cst-has-menu")
        .siblings(".cst-has-menu")
        .find(".cst-submenu")
        .slideUp();
    $(this).parent(".cst-has-menu").toggleClass("active");
    $(this).parent(".cst-has-menu").find(".cst-submenu").fadeToggle();
});

$(".newsletterSliderMain").slick({
    autoplay: true,
    autoplaySpeed: 5000,
    dots: false,
    arrows: false,
    infinite: true,
    slidesToShow: 1,
    slidesToScroll: 1,
});

$(function () {
    var native_width = 0;
    var native_height = 0;
    var mouse = { x: 0, y: 0 };
    var magnify;
    var cur_img;

    var ui = {
        magniflier: $(".magniflier"),
    };

    // Add the magnifying glass
    if (ui.magniflier.length) {
        var div = document.createElement("div");
        div.setAttribute("class", "glass");
        ui.glass = $(div);

        $("body").append(div);
    }

    // All the magnifying will happen on "mousemove"

    var mouseMove = function (e) {
        var $el = $(this);

        // Container offset relative to document
        var magnify_offset = cur_img.offset();

        // Mouse position relative to container
        // pageX/pageY - container's offsetLeft/offetTop
        mouse.x = e.pageX - magnify_offset.left;
        mouse.y = e.pageY - magnify_offset.top;

        // The Magnifying glass should only show up when the mouse is inside
        // It is important to note that attaching mouseout and then hiding
        // the glass wont work cuz mouse will never be out due to the glass
        // being inside the parent and having a higher z-index (positioned above)
        if (
            mouse.x < cur_img.width() &&
            mouse.y < cur_img.height() &&
            mouse.x > 0 &&
            mouse.y > 0
        ) {
            magnify(e);
        } else {
            ui.glass.fadeOut(100);
        }

        return;
    };

    var magnify = function (e) {
        // The background position of div.glass will be
        // changed according to the position
        // of the mouse over the img.magniflier
        //
        // So we will get the ratio of the pixel
        // under the mouse with respect
        // to the image and use that to position the
        // large image inside the magnifying glass

        var rx =
            Math.round(
                (mouse.x / cur_img.width()) * native_width -
                    ui.glass.width() / 2
            ) * -1;
        var ry =
            Math.round(
                (mouse.y / cur_img.height()) * native_height -
                    ui.glass.height() / 2
            ) * -1;
        var bg_pos = rx + "px " + ry + "px";

        // Calculate pos for magnifying glass
        //
        // Easy Logic: Deduct half of width/height
        // from mouse pos.

        // var glass_left = mouse.x - ui.glass.width() / 2;
        // var glass_top  = mouse.y - ui.glass.height() / 2;
        var glass_left = e.pageX - ui.glass.width() / 2;
        var glass_top = e.pageY - ui.glass.height() / 2;
        //console.log(glass_left, glass_top, bg_pos)
        // Now, if you hover on the image, you should
        // see the magnifying glass in action
        ui.glass.css({
            left: glass_left,
            top: glass_top,
            backgroundPosition: bg_pos,
        });

        return;
    };

    $(".magniflier").on("mousemove", function () {
        ui.glass.fadeIn(200);

        cur_img = $(this);

        var large_img_loaded = cur_img.data("large-img-loaded");
        var src = cur_img.data("large") || cur_img.attr("src");

        // Set large-img-loaded to true
        // cur_img.data('large-img-loaded', true)

        if (src) {
            ui.glass.css({
                "background-image": "url(" + src + ")",
                "background-repeat": "no-repeat",
            });
        }

        // When the user hovers on the image, the script will first calculate
        // the native dimensions if they don't exist. Only after the native dimensions
        // are available, the script will show the zoomed version.
        //if(!native_width && !native_height) {

        if (!cur_img.data("native_width")) {
            // This will create a new image object with the same image as that in .small
            // We cannot directly get the dimensions from .small because of the
            // width specified to 200px in the html. To get the actual dimensions we have
            // created this image object.
            var image_object = new Image();

            image_object.onload = function () {
                // This code is wrapped in the .load function which is important.
                // width and height of the object would return 0 if accessed before
                // the image gets loaded.
                native_width = image_object.width;
                native_height = image_object.height;

                cur_img.data("native_width", native_width);
                cur_img.data("native_height", native_height);

                //console.log(native_width, native_height);

                mouseMove.apply(this, arguments);

                ui.glass.on("mousemove", mouseMove);
            };

            image_object.src = src;

            return;
        } else {
            native_width = cur_img.data("native_width");
            native_height = cur_img.data("native_height");
        }
        //}
        //console.log(native_width, native_height);

        mouseMove.apply(this, arguments);

        ui.glass.on("mousemove", mouseMove);
    });

    ui.glass.on("mouseout", function () {
        ui.glass.off("mousemove", mouseMove);
    });
});
